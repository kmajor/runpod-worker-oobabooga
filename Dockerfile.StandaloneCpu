FROM nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04

#ARG MODEL="TheBloke/llama2_7b_chat_uncensored-GGML"
ARG MODEL="https://huggingface.co/TheBloke/Pygmalion-2-7B-GGUF/resolve/main/pygmalion-2-7b.Q4_K_M.gguf"

# Extract the model file name from the MODEL URL
RUN MODEL_FILE_NAME=$(basename ${MODEL})

ENV DEBIAN_FRONTEND=noninteractive \
    PIP_PREFER_BINARY=1 \
    PYTHONUNBUFFERED=1

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Upgrade apt packages and install required dependencies
RUN apt update && \
    apt upgrade -y && \
    apt install -y \
      python3-dev \
      python3-venv \
      git \
      git-lfs \ 
      vim && \
    apt autoremove -y && \
    rm -rf /var/lib/apt/lists/* && \
    apt clean -y

# 1. Clone the worker repo
# 2. Create and activate Python venv
# 5. Create test_input.json file for test inference
# 6. Run test inference using rp_handler.py to cache the models
WORKDIR /workspace
RUN git clone https://github.com/oobabooga/text-generation-webui && \
    cd text-generation-webui && \
    python3 -m venv venv && \
    source venv/bin/activate && \
    pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 && \
    pip3 install -r requirements.txt && \
    bash -c 'for req in extensions/*/requirements.txt ; do pip3 install -r "$req" ; done' && \
    deactivate


# Copy the Python script into the text-generation-webui directory
COPY create_test_json.py /workspace/text-generation-webui/


# Fetch the model
COPY download_model.py fetch_model.py /
RUN source /workspace/text-generation-webui/venv/bin/activate && \
     pip3 install huggingface_hub runpod

#    pip3 install huggingface_hub runpod && \
#    /fetch_model.py ${MODEL} /workspace/text-generation-webui/models

# Copy the model from the build context to the container
COPY models/${MODEL_FILE_NAME} /workspace/text-generation-webui/models/${MODEL_FILE_NAME}

# Change to the directory and run the Python script to create the test_input.json file
WORKDIR /workspace/text-generation-webui
RUN source venv/bin/activate && \
    python3 create_test_json.py

# Change working directory back to /workspace
WORKDIR /workspace


# Docker container start script
COPY start_standalone_cpu.sh /start.sh
COPY rp_handler.py /
COPY schemas /schemas

# Start the container
RUN chmod +x /start.sh
CMD /start.sh
